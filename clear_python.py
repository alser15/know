"""
Данный файл описывает примеры, приведенные в книге 'Чистый Python'
Файл служит исключительно для примера реализации тех или иных функций
"""


def test_assets_example():
    """
    Инструкция assert в Python — пример
    1) assert — это средство отладки, которое проверяет условие, выступающее в качестве внутренней самопроверки вашей
    программы.
    2) Инструкции assert могут быть глобально отключены в настройках
    интерпретатора.
    """
    product = {
        'цена': 100
    }
    discount = 1
    price = product['цена'] * (2.0 - discount)
    assert 0 <= price <= product['цена']
    print(price)


def test_with():
    """
    Пример реализации конструкции with
    Существует общая рекомендация открывать файлы, используя инструкцию with. Это связано с тем,
    что она гарантирует автоматическое закрытие дескрипторов открытых файлов после того, как выполнение
    программы покидает контекст инструкции with

    Режимы open:
    w : Открывает файл для записи и создает файл если он не существует
    w+ : Открывает файл для записи и создает если он не существует. Но если файл уже существует, то перезаписывает его.
    r: Открывает файл только для чтения.
    rb: Открывает файл только для чтения в двоичном формате.
    wb: Открывает файл для записи в двоичном формате
    wb+: Открывает файл для чтения и записи в двоичном формате.
    a: Открывает файл только для добавления в конец его содержимого
    +: В общем, этот символ используется в комбинации с r, w, или a и значит что файл открыт для записи и чтения.
    """
    with open('my_file.txt', 'w+') as f:
        f.write('this is new file')
    try:
        with open('my_file.txt', 'r') as f:
            print(f.read())
    finally:
        import os
        os.remove('my_file.txt')


def test_underlining():
    """
     _var - Префикс, состоящий из символа подчеркивания, подразумевается как
    подсказка, которая должна сообщить другому программисту, что переменная или метод,
    начинающиеся с одинарного символа подчеркивания,предназначаются для внутреннего пользования.

    var_ - Иногда самое подходящее имя переменной уже занято ключевым словом
    языка Python. По этой причине такие имена, как class или def, в Python
    нельзя использовать в качестве имен переменных. В этом случае можно
    в конец имени добавить символ одинарного подчеркивания, чтобы избежать конфликта из-за совпадения имен:
    ">>> def make_object(name, class):"
    SyntaxError: "invalid syntax"

    ">>> def make_object(name, class_):
     ... pass "

     __var - Префикс, состоящий из двойного символа подчеркивания, заставляет
    интерпретатор Python переписывать имя атрибута для того, чтобы в подклассах избежать конфликтов из-за
    совпадения имен.Такое переписывание также называется искажением имени (name
    mangling) — интерпретатор преобразует имя переменной таким образом,
    что становится сложнее создать конфликты, когда позже класс будет
    расширен.

     __var__ -  двойные символы подчеркивания часто называют
    «дандерами» (dunders — это сокращение от англ. double underscores).
    Указывает на специальные методы, такие как __init__, __iter__, __cal__ и т.д., определенные языком Python.
    Следует избегать этой схемы именования для своих собственных
    атрибутов.

    _ - иногда используется в качестве
    имени временных или незначительных переменных («неважных»).
    Кроме того, он представляет результат последнего выражения в сеансе
    интерпретатора REPL Python.
    """
    pass


def test_refactor_str():
    """
    Примеры возможных форматирований строк
    """
    word_one = 'Привет'
    word_two = "Читающий"

    print('%s,' % word_one, "%s" % word_two)
    print('{}, {}'.format(word_one, word_two))
    print(f"{word_one}, {word_two}")

